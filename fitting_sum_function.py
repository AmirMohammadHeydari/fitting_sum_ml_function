# -*- coding: utf-8 -*-
"""fitting_sum_function.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18Nx8Z_HNBviauxzssmyt0raHQ1zcLAWN
"""

import numpy as np

x = np.arange(-10,10,0.2)
y=2*np.cos(x)/np.pi+2*np.sin(2*x)/2*np.pi+2*np.cos(3*x)/-3*np.pi

from sklearn.model_selection import KFold
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

k=5
kf = KFold(n_splits = 5)
mse_mean_linear = []
for train_index , test_index in kf.split(x,y):

  x_train , x_test = x[train_index].reshape(-1,1),x[test_index].reshape(-1,1)
  y_train,y_test = y[train_index],y[test_index]

  model = LinearRegression()
  model.fit(x_train,y_train)

  pred = model.predict(x_test)

  mse = mean_squared_error(y_test , pred)
  mse_mean_linear.append(mse)

mse_final_linear = np.mean(mse_mean_linear)
print(mse_final_linear)

from sklearn.preprocessing import PolynomialFeatures

poly = PolynomialFeatures(3)
mse_mean_poly =[]

for train_index , test_index in kf.split(x,y):

  x_train_poly = poly.fit_transform(x[train_index].reshape(-1,1))
  x_test_poly = poly.transform(x[test_index].reshape(-1,1))

  y_train = y[train_index]
  y_test = y[test_index]

  model1 = LinearRegression()
  model1.fit(x_train_poly,y_train)
  y_predict =model1.predict(x_test_poly)

  mse = mean_squared_error(y_test,y_predict)
  mse_mean_poly.append(mse)

mse_final_poly = np.mean(mse_mean_poly)

print(mse_final_poly)

from sklearn.linear_model import Ridge

alphas = np.logspace(-10,10,100)
mse_mean_ridge=[]

for alpha in alphas:
  mse_ridge = []
  for train_index , test_index in kf.split(x,y):

    x_train,y_train = x[train_index],y[train_index]
    x_test,y_test = x[test_index],y[test_index]

    model3 = Ridge(alpha = alpha)
    model3.fit(x_train.reshape(-1,1),y_train)

    y_pred = model3.predict(x_test.reshape(-1,1))

    mse = mean_squared_error(y_test,y_pred)
    mse_ridge.append(mse)
  mse_mean_ridge.append(np.mean(mse_ridge))

best_alpha = alphas[mse_mean_ridge.index(min(mse_mean_ridge))]
print(f'the best alpha is {best_alpha}')

import matplotlib.pyplot as plt
plt.plot(alphas,mse_mean_ridge);